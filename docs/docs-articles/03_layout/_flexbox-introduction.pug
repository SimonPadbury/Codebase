extends ../../docs-template-partials/_docs-article

block prepend article
  - var articleId = "layout-flexbox-introduction"
  - var articleTitle = "Flexbox Columnar Grid System â€“ Introduction"

block section
  
  p.lead Since Codebase 2.0, the flexbox layout mixins and classes formerly using the word "grid" have been renamed simply as layout #[code flexbox] and "col" (column) has been renamed as #[code flex-item]*.

  p (So, the classname "grid" is free to be used on a proper CSS grid system in future.)
  
  table.table.table--rows.table--columns
    thead
      tr
        th
        th Mixin (prefix)
        th Class (prefix)
    tbody
      tr
        td The flexbox block
        td #[code @include flexbox(--*)]
        td #[code .flexbox(--*)]
      tr
        td The flex-item element (immediate child)
        td #[code @include flex-item--*]
        td #[code .flex-item--*]
  
  .bg--green-lighten-3.p--16
    | #[b *Note:] In the Codebase CSS there is #[i no styling] for the class #[code.black .flex-item] &ndash; so you don't actually need to use this class anywhere. The #[a(href="#layout-flexbox-simple") simple flexbox] doesn't need classes on the immediate child elements (i.e. the flex-items) at all. But #[code.black .flex-item--] is used as a prefix for the #[a(href="#layout-flexbox-traditional") traditional flexbox] (responsive) span, offset, order and center classes.

  p.mt--line The Codebase flexbox system can be used in two ways:
  
  ol
    li #[a.big.bold(href="#layout-flexbox-simple") Simple flexbox] &ndash; #[code .flexbox] simply puts the #[b immediate child] elements in a row. They will each occupy their own required (but there are some modifier classes that can be used for "growing" flex-items). Simple flexbox does not respond to media query breakpoints.

    li #[a.big.bold(href="#layout-flexbox-traditional") Traditional flexbox] &ndash; this supports all the following options:
      ul
        li Flex-item span
        li Flex-item offset
        li Flex-item (re)order
        li Flex-item center (horizontally) and/or middle (vertically)
        li Incomplete flexbox "rows" &ndash; the last flex-item does not expand to occupy the unused space, and no additional "end" class is required
        li Flex-item wrapping &ndash; surplus flex-items will automatically wrap if they extend beyond the flexbox container max width
        li Responsive flexbox layouts at different media query breakpoint widths