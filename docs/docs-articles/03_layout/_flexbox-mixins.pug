extends ../../docs-template-partials/_docs-article

block prepend article
  - var articleId = "layout-flexbox-mixins"
  - var articleTitle = "Using Flexbox Mixins for Semantic Layouts"

block section

  p.lead Most Codebase flexbox layout mixins are used for generating the Codebase flexbox layout clases. As such, they are not suitable for Sass (SCSS) users to include in their code. But Codebase also has a semantic flexbox layout system for Sass users.

  p See:

  ol.brackets
    li #[a(href="codebase/scss/02_layout/_shared-flexbox-base.scss") codebase/scss/02_layout/_shared-flexbox-base.scss].
    li #[a(href="codebase/scss/02_layout/_semantic-flexbox-system.scss") codebase/scss/02_layout/_semantic-flexbox-system.scss].

  p Use these semantic flexbox mixins as in the following example:

  .your-flexbox-container
    .your-article-flex-item
      .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Article
        .your-nested-flexbox-container
          .your-nested-flex-item
            .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Nested
          .your-nested-flex-item
            .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Nested
          .your-nested-flex-item
            .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Nested
    .your-sidebar-flex-item
      .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Aside
  .your-flexbox-container
    .your-centered-flex-item
      .b--thin.b--blue-lighten-2.b--rounded.p--4.bg--blue-lighten-3 Centered

  
  .tabs.decorate.mt--24
    .tab__label-wrap--right
      .tab__label(data-tab-id="tab-docs-flexbox-semantic-html") HTML
      .tab__label(data-tab-id="tab-docs-flexbox-semantic-scss") SCSS

    #tab-docs-flexbox-semantic-html.tab__panel
      pre.mt
        code.
          &lt;div class="your-flexbox-container"&gt;
            &lt;div class="your-article-column"&gt;
              Article

              &lt;div class="your-nested-flexbox-container"&gt;
                &lt;div class="your-nested-column"&gt;
                  Nested
                &lt;/div&gt;
                &lt;div class="your-nested-column"&gt;
                  Nested
                &lt;/div&gt;
                &lt;div class="your-nested-column"&gt;
                  Nested
                &lt;/div&gt;
              &lt;/div&gt;

            &lt;/div&gt;
            &lt;div class="your-sidebar-column"&gt;
              Aside
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;div class="your-flexbox-container"&gt;
            &lt;div class="your-centered-column"&gt;
              Centered
            &lt;/div&gt;
          &lt;/div&gt;

    #tab-docs-flexbox-semantic-scss.tab__panel
      pre.mt
        code.
          .your-flexbox-container {
            @include flexbox;
            @include flexbox--gap;
          }

          .your-article-flex-item {
            @include break--min($cb-mq--md) {
              @include flex-item--span(9);
            }
            @include break--min($cb-mq--lg) {
              @include flex-item--order(2);
            }
          }

          .your-sidebar-flex-item {
            @include break--min($cb-mq--md) {
              @include flex-item--span(3);
            }
            @include break--min($cb-mq--lg) {
              @include flex-item--order(1);
            }
          }

          .your-nested-flexbox-container {
            @include flexbox;
            @include flexbox--gap;
            
          }

          .your-nested-flex-item {
            @include break--min($cb-mq--md) {
              @include flex-item--span(4);
            }
          }

          .your-centered-flex-item {
            @include flex-item--centered(7);
          }


  p.
    The Codebase semantic flexbox and flex-item mixins are named similar to the Codebase classic flexbox and flex-item classes. However, note that there are no breakpoints built into these mixins &ndash; you can apply them in your SCSS as in the example above.

  table.table.table--rows.table--columns
    thead
      tr
        th(style="width: 200px") Mixin
        th Explanation
    tbody
      tr
        td(colspan="2").bg--gray-lighten-3
          b Flexbox mixins
      tr
        td
          code @include flexbox
        td.
          The container mixin. Sets the max width (from variable  #[code $cb-flexbox--max-width]), does centering by auto margin right and left. If you have more columns (or column width) than the flexbox container width, wrapping is handled by #[code flex-wrap: wrap;]
          #[br]
          #[br]
          If a flexbox container doesn't have the flexbox mixin included, then a flexbox system will expand to whatever the width of the container is, without maxing out at #[code $cb-flexbox--max-width]. E.g. it could expand to the #[code &lt;body&gt;] width.
      tr
        td
          code.nowrap @include flexbox--grow-equal
        td.
          Flexbox modifier mixin &ndash; makes (immediate child) flex-items to grow to equal width.
      tr
        td
          code.nowrap @include flexbox--grow-auto
        td.
          Flexbox modifier mixin &ndash; makes (immediate child) flex-items to grow to equal width.
      tr
        td
          code.nowrap @include flexbox--container
        td.
          Flexbox modifier mixin &ndash; constrains the flexbox to #[code $cb-flexbox--max-width] and, on wider viewports, centers the flexbox by auto-margins right and left.
      tr
        td
          code @include flexbox--gap
        td.
          Gives right and left padding to all immediate child block elements (flex-items).
      tr
        td
          code @include flexbox--center
        td
          Applied to the flexbox container, this will horizontally center any number of flex-items.
      tr
        td
          code @include flexbox--middle
        td.
          Applied to the flexbox container, this will vertically center any number of flex-items.
      tr
        tr
          td(colspan="2").bg--gray-lighten-3
            b Flex-item mixins
        td
          code @include flex-item--span(X)
        td.
          Column spanning using % widths (#[b note:] not using flex-grow), as calculated out of #[code $cb-max-flex-items] (default is 12).
      tr
        td
          code.nowrap @include flex-item--offset(X)
        td.
          Flexitem offsetting (at different breakpoints), as calculated out of max #[code $cb-max-flex-items] (default is 12).
      tr
        td
          code @include flex-item--order(X)
        td.
          Column (re-)ordering.
