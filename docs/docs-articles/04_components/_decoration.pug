extends ../../docs-template-partials/_docs-article

block prepend article
  - var articleId = "components-decoration"
  - var articleTitle = "Decoration"

block section
  
  p.lead Codebase components attempt to be as undecorated as possible &ndash; so that there is not much that you would need to override in your CSS. 
  
  p However, it is not easy to demonatrate undecorated components. So, for ease of use in this documentation some components have some lightweight minimal styling applied by adding the class #[code .decorate]. 
  
  p.bg--green-lighten-3.p--16 #[b Tip:] You can also use the #[code .decorate] class e.g. during your prototyping. Similarly, you can create your own decoration styling and classes &ndash; maybe you can have several alternate "paint jobs" for use in different contexts on your website.

  p #[code .decorate] styling has been built using the same set of decoration variables as Codebase uses for the #[a(href="/decoration-utilities.html") decoration utility classes]. These consist mainly of adding margin(s) and paddings(s) in accordance with the #[a(href="decoration-utilities.html#decoration-utilities-element-grid") element grid], and sometimes a thin border, some gray shading (e.g. for back tabs) and box shadows (e.g. for dropdown content).
    
  p So, you can add decorative styling in three ways:
    
  ol.brackets
    li Use the #[code .decorate] class on many Codebase components (as listed in the table below)
    li Use Codebase #[a(href="decoration-utilities.html") decoration utility classes]
    li Style using your own CSS
    
  table.table.table--rows.table--columns
    thead
      tr
        th Component
        th Optional #[code .decorate]
        th Notes
    tbody
      tr
        td Showhide
        td.center #[i(data-feather="x")]
        td It's easy enough to add style e.g. by adding #[code .btn] to the showhide controller element and a background to the showhide content element.
      tr
        td Dropdown
        td.center #[i(data-feather="check")]
        td #[i Decoration styling is only applied to the dropdown content element.] The dropdown controller element can by styled e.g. by adding #[code .btn]
      tr
        td Simple Menubar
        td.center #[i(data-feather="check")]
        td
      tr
        td Complex Menubar
        td.center #[i(data-feather="check")]
        td Note: You don't need to add #[code .decorate] to each dropdown content element &ndash; it is built in to #[code .menubar.decorate] (and applied only to functional dropdowns above the menubar breakpoint).
      tr
        td Off-canvas
        td.center #[i(data-feather="check")]
        td No decoration styling has been provided for the off-canvas component.
      tr
        td Media Object
        td.center #[i(data-feather="check")]
        td 
      tr
        td Card
        td.center #[i(data-feather="check")]
        td 
      tr
        td Table
        td.center #[i(data-feather="x")]
        td Codebase tables have several modifier classes that handle borders and cell content alignment. See #[a(href="#components-table") table component].
      tr
        td Tab System
        td.center #[i(data-feather="check")]
        td Decoration styling to define the tab labels and the top borders of tab content panels only.
      tr
        td Pagination
        td.center #[i(data-feather="check")]
        td
  
  p If you never use any of these component #[code .decorate] classes, you can easily toggle them off by overriding the component decoration #[code true !default] variables in #[a(href="codebase/scss/00_default-variables/_default-variables.scss")  codebase/scss/00_default-variables/_default-variables.scss]. That way these unused styles won't be packaged in #[code codebase.css].
